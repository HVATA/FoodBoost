@page "/favorites"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@using RuokaBlazor.Properties.Model
@using System.Security.Claims
@using RuokaBlazor.Services
@using System.Text.Json;

<div>
    <div class="main-content">
        <div class="row">
            @if (recipes != null && recipes.Any())
            {
                @foreach (var recipe in recipes)
                {
                    <div class="column">
                        <div class="card" @onclick="() => SelectRecipe(recipe)">
                            <h3>@recipe.Nimi</h3>
                            <p>@recipe.Valmistuskuvaus</p>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>@message</p>
            }
        </div>
    </div>
</div>

<style>


    .search-input {
        border: 2px solid gray;
        padding: 5px;
    }

        .search-input.valid {
            border: 2px solid green; /* Muuttaa reunuksen vihreäksi */
            outline: none; /* Poistaa oletuskehykset */
        }

        .search-input.invalid {
            border: 2px solid red; /* Muuttaa reunuksen punaiseksi */
            outline: none;
        }


    .dropbtn {
        background-color: #3498DB;
        color: white;
        padding: 16px;
        font-size: 16px;
        border: none;
        cursor: pointer;
    }

        .dropbtn:hover, .dropbtn:focus {
            background-color: #2980B9;
        }

    .dropdown {
        position: relative;
        display: inline-block;
    }

    .search-container {
        position: relative;
        display: inline-block;
    }

    .dropdown-content {
        position: absolute;
        background-color: #f1f1f1;
        min-width: 160px;
        overflow: auto;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
    }

        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

    .dropdown a:hover {
        background-color: #ddd;
    }

    .show {
        display: block;
    }

    .search-btn {
        background-color: #3498DB;
        color: white;
        padding: 16px;
        font-size: 16px;
        border: none;
        cursor: pointer;
    }

    .search-input {
        width: 70rem;
        height: 4rem;
        position: relative;
        display: inline-block;
    }

    .recipe-image {
        width: 100px;
        height: 100px;
    }

    .recipe-card {
        display: flex;
        justify-content: initial;
        align-items: center;
        height: 20rem;
    }

    * {
        box-sizing: border-box;
    }

    body {
        font-family: Arial, Helvetica, sans-serif;
    }

    .column {
        float: left;
        width: 25%;
        padding: 0 10px;
    }

    .row {
        margin: 0 -5px;
    }

        .row:after {
            content: "";
            display: table;
            clear: both;
        }

    .card {
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        padding: 16px;
        text-align: center;
        background-color: #f1f1f1;
        cursor: pointer;
    }

</style>

@code {
    private ClaimsPrincipal user;
    public List<Suosikit>? suosikitlista;
    private string message = string.Empty;
    private Kayttaja kayttaja;
    private ReseptiRequest? resepti;
    public int Id;

    [Parameter]
    public List<Resepti> recipes { get; set; }

    [Parameter]
    public List<Ainesosa>? ingredients { get; set; } // Tee tästä parametri testejä varten

    [Parameter]
    public List<ReseptiAinesosa>? aineosat { get; set; }

    [Parameter]
    public List<Avainsana>? keywords { get; set; } // Tee tästä parametri testejä varten

    protected override async Task OnInitializedAsync()
    {
        // Haetaan kirjautuneen käyttäjän tiedot
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
        var userFirstname = user.FindFirst(ClaimTypes.GivenName)?.Value;
        var userLastname = user.FindFirst(ClaimTypes.Surname)?.Value;
        var username = user.FindFirst("Nimimerkki")?.Value;
        var userPassword = user.FindFirst("Salasana")?.Value;

        kayttaja = new Kayttaja
        {
                Id = int.Parse(userId ?? "0"),
                Etunimi = userFirstname,
                Sukunimi = userLastname,
                Sahkopostiosoite = userEmail,
                Nimimerkki = username,
                Salasana = userPassword,
                Kayttajataso = userRole
        };

        GetFavoriteRecipes();
    }

    private void SelectRecipe(Resepti recipe)
    {
        Navigation.NavigateTo($"/recipe/{recipe.Id}");
    }

    private async Task GetFavoriteRecipes()
    {
        try
        {
            // Suoritetaan PUT-pyyntö ja lähetetään Kayttaja-objekti request-bodyssa
            string url = "/Kayttaja/Haesuosikkireseptit";
            HttpResponseMessage response = await Http.PutAsJsonAsync(url, kayttaja);

            // Tarkistetaan onko pyyntö onnistunut
            if (response.IsSuccessStatusCode)
            {
                // Luetaan JSON-tulos ja muunnetaan se listaksi Resepti-objekteja
                recipes = await response.Content.ReadFromJsonAsync<List<Resepti>>();

                // Debugging: Tarkistetaan, että reseptit tulevat oikein
                Console.WriteLine($"Reseptit: {recipes?.Count ?? 0}");

                if (recipes == null || !recipes.Any())
                {
                    message = "Sinulla ei ole vielä suosikkireseptejä.";
                }
            }
            else
            {
                message = await response.Content.ReadAsStringAsync(); // Backendin virheilmoitus
            }

            // Tila päivitetään, jos reseptit löytyvät
            StateHasChanged();

        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa reseptejä: {ex.Message}";
        }
    }
}