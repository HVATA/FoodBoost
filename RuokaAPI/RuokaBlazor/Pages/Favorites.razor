@page "/favorites"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@using RuokaBlazor.Properties.Model
@using System.Security.Claims
@using RuokaBlazor.Services
@using System.Text.Json;

<div>
    <div class="main-content">
        <div class="row">
            @if (recipes != null)
            {
                @foreach (var recipe in recipes)
                {
                    <div class="column">
                        <div class="custom-card-wrapper" @onclick="@(() => SelectRecipe(recipe))">
                            <div class="custom-card">
                                <h4>@recipe.Nimi</h4>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private ClaimsPrincipal user;
    public List<Suosikit>? suosikitlista;
    private string message = string.Empty;
    private Kayttaja kayttaja;
    private ReseptiRequest? resepti;
    public int Id;

    [Parameter]
    public List<Resepti> recipes { get; set; }

    [Parameter]
    public List<Ainesosa>? ingredients { get; set; } // Tee tästä parametri testejä varten

    [Parameter]
    public List<ReseptiAinesosa>? aineosat { get; set; }

    [Parameter]
    public List<Avainsana>? keywords { get; set; } // Tee tästä parametri testejä varten

    protected override async Task OnInitializedAsync()
    {
        // Haetaan kirjautuneen käyttäjän tiedot
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
        var userFirstname = user.FindFirst(ClaimTypes.GivenName)?.Value;
        var userLastname = user.FindFirst(ClaimTypes.Surname)?.Value;
        var username = user.FindFirst("Nimimerkki")?.Value;
        var userPassword = user.FindFirst("Salasana")?.Value;

        kayttaja = new Kayttaja
        {
                Id = int.Parse(userId ?? "0"),
                Etunimi = userFirstname,
                Sukunimi = userLastname,
                Sahkopostiosoite = userEmail,
                Nimimerkki = username,
                Salasana = userPassword,
                Kayttajataso = userRole
        };

        GetFavoriteRecipes();
    }

    private void SelectRecipe(Resepti recipe)
    {
        Navigation.NavigateTo($"/recipe/{recipe.Id}");
    }

    private async Task GetFavoriteRecipes()
    {
        try
        {
            // Suoritetaan PUT-pyyntö ja lähetetään Kayttaja-objekti request-bodyssa
            string url = "/Kayttaja/Haesuosikkireseptit";
            HttpResponseMessage response = await Http.PutAsJsonAsync(url, kayttaja);

            // Tarkistetaan onko pyyntö onnistunut
            if (response.IsSuccessStatusCode)
            {
                // Luetaan JSON-tulos ja muunnetaan se listaksi Resepti-objekteja
                recipes = await response.Content.ReadFromJsonAsync<List<Resepti>>();

                // Debugging: Tarkistetaan, että reseptit tulevat oikein
                Console.WriteLine($"Reseptit: {recipes?.Count ?? 0}");

                if (recipes == null || !recipes.Any())
                {
                    message = "Sinulla ei ole vielä suosikkireseptejä.";
                }
            }
            else
            {
                message = await response.Content.ReadAsStringAsync(); // Backendin virheilmoitus
            }

            // Tila päivitetään, jos reseptit löytyvät
            StateHasChanged();

        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa reseptejä: {ex.Message}";
        }
    }
}