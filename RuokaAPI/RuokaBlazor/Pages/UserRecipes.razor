@page "/userRecipes"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@using RuokaBlazor.Properties.Model
@using RuokaBlazor.Services
@using System.Security.Claims
@using System.Text.Json

@if (reseptit == null)
{
    <h1>Ladataan reseptejä...</h1>
}
else if (!reseptit.Any())
{
    <h1>Sinulla ei ole vielä reseptejä.</h1>
}
else
{
    <h1>Omat Reseptit</h1>
    <ul class="recipe-list">
        @foreach (var resepti in reseptit)
        {
            <li class="recipe-item">
                <a href="@($"/recipe/{resepti.Id}")" class="recipe-link">
                    <div class="recipe-info">
                        <h3>@resepti.Nimi</h3>
                        <p>@resepti.Valmistuskuvaus</p>
                        @if (!string.IsNullOrWhiteSpace(resepti.Kuva1))
                        {
                            <img src="@resepti.Kuva1" alt="@resepti.Nimi" class="recipe-image" />
                        }
                    </div>
                </a>
                <div class="recipe-actions">
                    <button data-testid="edit-button" class="btn btn-primary" @onclick="() => MuokkaaResepti(resepti.Id)">Muokkaa</button>
                    <button data-testid="delete-button" class="btn btn-danger" @onclick="() => PoistaResepti(resepti.Id)">Poista</button>
                </div>
            </li>
        }
    </ul>
}

<style>
    .recipe-list {
        list-style-type: none;
        padding: 0;
    }

    .recipe-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        margin-bottom: 1rem;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .recipe-link {
        text-decoration: none;
        color: inherit;
        display: flex;
        flex: 1;
    }

    .recipe-info {
        flex: 1;
    }

    .recipe-image {
        max-width: 100px;
        height: auto;
        border-radius: 8px;
        margin-left: 1rem;
    }

    .recipe-actions {
        display: flex;
        gap: 1rem;
    }
</style>

@code {
    private List<ReseptiResponse>? reseptit;

    protected override async Task OnInitializedAsync()
    {
        // Haetaan kirjautuneen käyttäjän tiedot
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (int.TryParse(userId, out var id))
            {
                await HaeOmatReseptit(id);
            }
        }
    }

    private async Task HaeOmatReseptit(int userId)
    {
        try
        {
            reseptit = await Http.GetFromJsonAsync<List<ReseptiResponse>>($"resepti/omat/{userId}");
            if (reseptit == null || !reseptit.Any())
            {
                reseptit = new List<ReseptiResponse>();
            }
        }
        catch
        {
            reseptit = new List<ReseptiResponse>();
        }
    }

    private void MuokkaaResepti(int reseptiId)
    {
        Navigation.NavigateTo($"/editRecipe/{reseptiId}");
    }

    public async Task PoistaResepti(int reseptiId)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("window.confirm", new object[] { "Haluatko varmasti poistaa tämän reseptin?" });
        if (confirm)
        {
            try
            {
                var response = await Http.DeleteAsync($"resepti/{reseptiId}");
                if (response.IsSuccessStatusCode)
                {
                    reseptit = reseptit?.Where(r => r.Id != reseptiId).ToList();
                    if (reseptit == null || !reseptit.Any())
                    {
                        reseptit = new List<ReseptiResponse>();
                    }
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Poikkeus poistamisessa: {ex.Message}");
            }
        }
    }

    public async Task SetRecipes(List<ReseptiResponse> recipes)
    {
        reseptit = recipes;
        await InvokeAsync(StateHasChanged);
    }
}


