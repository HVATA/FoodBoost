@page "/"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@using RuokaBlazor.Properties.Model
@using RuokaBlazor.Services

<EditForm Model="kayttaja" OnValidSubmit="HandleLogin" class="login-layout">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="email">Sähköpostiosoite</label>
        <InputText id="email" @bind-Value="kayttaja.Sahkopostiosoite" class="form-control" />
    </div>

    <div>
        <label for="password">Salasana</label>
        <InputText id="password" @bind-Value="kayttaja.Salasana" type="password" class="form-control" />
    </div>

    <div style="margin-bottom: 15px;"></div>

    <button type="submit" class="btn btn-primary">Kirjaudu</button>

    <div style="margin-bottom: 15px;"></div>
    <div>
        <button type="submit" @onclick="GuestLogin" class="btn btn-primary">Jatka vieraskäyttäjänä</button>
    </div>
    <div>
        <button @onclick="GoToSignup" class="btn btn-link">Rekisteröidy</button>
    </div>

    @if (forgotPassword)
    {
        <div>
            <button @onclick="ShowForgotPasswordModal" class="btn btn-link">Unohditko salasanasi?</button>
        </div>
    }
</EditForm>

<p>@message</p>

<!-- Salasanan palautus -modal -->
@if (showForgotPasswordModal)
{
    <div class="modal-backdrop">
        <div class="modal show">
            <!-- Lisätty "show" luokka -->
            <div class="modal-content">
                <h3>Salasanan palautus</h3>
                <p>Syötä sähköpostiosoite, niin lähetämme palautuslinkin.</p>

                <InputText @bind-Value="resetEmail" placeholder="Sähköpostiosoite" class="form-control" />

                <div class="modal-actions">
                    <button @onclick="SendPasswordReset" class="btn btn-primary">Lähetä</button>
                    <button @onclick="CloseForgotPasswordModal" class="btn btn-secondary">Peruuta</button>
                </div>

                <p>@resetMessage</p>
            </div>
        </div>
    </div>
}

<style>
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center; /* Vertikaalinen keskitys */
        justify-content: center; /* Horisontaalinen keskitys */
        z-index: 1050;
    }

    .modal {
        background: white;
        padding: 20px;
        border-radius: 8px;
        width: 300px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
        text-align: center;
        position: relative;
        z-index: 1060;
        /* Ei marginaalia enää, koska se voi aiheuttaa ongelmia */
        margin: 0;
        /* Lisää korkeutta modaliin, jotta se ei mene kiinni reunoihin */
        max-height: 50vh; /* Enimmäiskorkeus 80% näytön korkeudesta */
        overflow-y: auto; /* Mahdollistaa vierityksen, jos sisältö on liian pitkä */
    }

        .modal.show {
            display: block; /* Näytetään, kun modal on aktiivinen */
        }

    .modal-content {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .modal-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

    .close {
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
        font-size: 20px;
        color: black;
    }


</style>

@code {
    private Kayttaja kayttaja = new();
    private string message = string.Empty;
    private bool forgotPassword = false;
    private bool showForgotPasswordModal = false;
    private string resetEmail = string.Empty;
    private string resetMessage = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.GetAsync($"Kayttaja/Tunnistautumistiedot/{kayttaja.Salasana}/{kayttaja.Sahkopostiosoite}");

            if (response.IsSuccessStatusCode)
            {
                var userData = await response.Content.ReadFromJsonAsync<UserData>();
                if (userData != null)
                {
                    message = "Kirjautuminen onnistui";
                    forgotPassword = false;
                    await AuthenticationStateProvider.Login(userData);
                    Navigation.NavigateTo("/home");
                }
                else
                {
                    message = "Käyttäjätietojen hakeminen epäonnistui.";
                    forgotPassword = true;
                }
            }
            else
            {
                message = "Virheellinen sähköpostiosoite tai salasana";
                forgotPassword = true;
            }
        }
        catch (Exception ex)
        {
            message = "Error during login: " + ex.Message;
            forgotPassword = true;
        }
    }

    private void ShowForgotPasswordModal()
    {
        showForgotPasswordModal = !showForgotPasswordModal; // Tämä kääntää näkyvyyden
    }

    private void CloseForgotPasswordModal()
    {
        showForgotPasswordModal = false;
        resetEmail = string.Empty;
        resetMessage = string.Empty;
        StateHasChanged(); // Pakotetaan Blazor päivitys
    }

    private async Task SendPasswordReset() //KORJATAAAN MYÖHEMMIN///////////////
    {
        if (string.IsNullOrWhiteSpace(resetEmail))
        {
            resetMessage = "Syötä voimassa oleva sähköpostiosoite!";
            return;
        }

        try
        {

            // Lähetetään pyyntö backendiin salasanan palautusta varten
            HttpResponseMessage response = await Http.GetAsync($"Kayttaja/Salasananpalautus/{resetEmail}");

            if (response.IsSuccessStatusCode)
            {
                resetMessage = "Palautuslinkki on lähetetty sähköpostiisi!";
            }
            else
            {
                resetMessage = await response.Content.ReadAsStringAsync(); // Näytetään virheilmoitus, joka tulee back-endistä
            }
        }
        catch (Exception ex)
        {
            resetMessage = "Virhe: " + ex.Message;
        }
    }

    private void GuestLogin()
    {
        AuthenticationStateProvider.Logout();
        Navigation.NavigateTo("/home");
    }

    private void GoToSignup()
    {
        Navigation.NavigateTo("/signup");
    }
}
