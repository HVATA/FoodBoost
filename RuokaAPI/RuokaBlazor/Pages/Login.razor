@page "/"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@using RuokaBlazor.Properties.Model
@using RuokaBlazor.Services


<EditForm Model="kayttaja" OnValidSubmit="HandleLogin" class="login-layout">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="username">Sähköpostiosoite</label>
        <InputText id="email" @bind-Value="kayttaja.Sahkopostiosoite" class="form-control" />
    </div>

    <div>
        <label for="password">Salasana</label>
        <InputText id="password" @bind-Value="kayttaja.Salasana" type="password" class="form-control" />
    </div>

    <div style="margin-bottom: 15px;"></div>

    <button type="submit" class="btn btn-primary">Kirjaudu</button>

    <div style="margin-bottom: 15px;"></div>
    <div>
        <button type="submit" @onclick="GuestLogin" class="btn btn-primary">Jatka vieraskäyttäjänä</button>
    </div>
    <div>
        <button @onclick="GoToSignup" class="btn btn-link">Rekisteröidy</button>
    </div>
</EditForm>

<p>@message</p>

@code {
    private Kayttaja kayttaja = new();
    private string message = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.GetAsync($"Kayttaja/Tunnistautumistiedot/{kayttaja.Salasana}/{kayttaja.Sahkopostiosoite}");

            if (response.IsSuccessStatusCode)
            {
                var userData = await response.Content.ReadFromJsonAsync<UserData>();
                if (userData != null)
                {
                    message = "Kirjautuminen onnistui";
                    // Käytä uutta Login-metodia ja lähetä kaikki käyttäjän tiedot
                    await AuthenticationStateProvider.Login(userData);

                    Console.WriteLine($"Kirjautunut käyttäjä: {userData.Sahkopostiosoite}, {userData.Kayttajataso}, {userData.Id}");

                    Navigation.NavigateTo("/home");
                }
                else
                {
                    message = "Käyttäjätietojen hakeminen epäonnistui.";
                }
            }
            else
            {
                message = "Virheellinen sähköpostiosoite tai salasana";
            }
        }
        catch (Exception ex)
        {
            message = "Error during login: " + ex.Message;
        }
    }


    private void GuestLogin()
    {
        // Vieraskäyttäjän kirjautuminen
        AuthenticationStateProvider.Logout();
        Navigation.NavigateTo("/home");
    }

    private void GoToSignup()
    {
        Navigation.NavigateTo("/signup");
    }
}
