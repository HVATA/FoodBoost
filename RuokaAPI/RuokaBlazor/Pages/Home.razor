@page "/home"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider CustomAuthStateProvider
@using RuokaBlazor.Properties.Model
@using System.Security.Claims
@using RuokaBlazor.Services
@using System.Text.Json;

<div>
    <div class="search-bar">
        <div class="search-container">
            <button @onclick="GetRecipesWithSearchquery" class="search-btn">Hae</button>
        </div>
        <div class="search-container">
            <div>
                <input type="text"
                       value="@SearchQuery"
                       @oninput="SearchQueryChanged"
                       class="@SearchInputClass"
                       placeholder="Hae reseptejä nimellä tai ainesosalla..." />
            </div>
        </div>
    </div>

    <div class="dropdown-bar" @onclick="CloseDropdownsOnClickOutside">
        <!-- Raaka-aine dropdown -->
        <div class="dropdown" @onclick:stopPropagation="true">
            <button @onclick="ToggleIngredientDropdown" class="dropbtn">Raaka-aine</button>
            @if (isIngredientDropdownVisible)
            {
                <div class="dropdown-content">
                    @if (ingredients != null && ingredients.Any())
                    {
                        @foreach (var ingredient in ingredients)
                        {
                            <label>
                                <input type="checkbox" @bind="ingredient.IsChecked" @bind:event="oninput" @onchange="UpdateSearchQuery"/>
                                @ingredient.Nimi
                            </label>


                        }
                    }
                    else
                    {
                        <p>Ladataan...</p>
                    }
                </div>
            }
        </div>

        <!-- Avainsanat dropdown -->
        <div class="dropdown" @onclick:stopPropagation="true">
            <button @onclick="ToggleKeywordDropdown" class="dropbtn">Avainsanat</button>
            @if (isKeywordDropdownVisible)
            {
                <div class="dropdown-content">
                    @if (keywords != null && keywords.Any())
                    {
                        @foreach (var keyword in keywords)
                        {
                            <label>
                                <input type="checkbox" @bind="keyword.IsChecked" @bind:event="oninput" @onchange="UpdateSearchQuery" />
                                @keyword.Sana
                            </label>
                        }
                    }
                    else
                    {
                        <p>Ladataan...</p>
                    }
                </div>
            }
        </div>

    </div>

    <div class="main-content">
        <div class="row">
            @if (recipes != null)
            {
                @foreach (var recipe in recipes)
                {
                    <div class="column">
                        <div class="card" @onclick="() => SelectRecipe(recipe)">
                            <h3>@recipe.Nimi</h3>
                            <p>@recipe.Valmistuskuvaus</p>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>Ladataan reseptejä...</p>
            }
        </div>
    </div>
</div>

<style>

    .search-input {
        border: 2px solid gray;
        padding: 5px;
    }

        .search-input.valid {
            border: 2px solid green; /* Muuttaa reunuksen vihreäksi */
            outline: none; /* Poistaa oletuskehykset */
        }

        .search-input.invalid {
            border: 2px solid red; /* Muuttaa reunuksen punaiseksi */
            outline: none;
        }


    .dropbtn {
        background-color: #3498DB;
        color: white;
        padding: 16px;
        font-size: 16px;
        border: none;
        cursor: pointer;
    }

        .dropbtn:hover, .dropbtn:focus {
            background-color: #2980B9;
        }

    .dropdown {
        position: relative;
        display: inline-block;
    }

    .search-container {
        position: relative;
        display: inline-block;
    }

    .dropdown-content {
        position: absolute;
        background-color: #f1f1f1;
        min-width: 160px;
        overflow: auto;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
    }

        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

    .dropdown a:hover {
        background-color: #ddd;
    }

    .show {
        display: block;
    }

    .search-btn {
        background-color: #3498DB;
        color: white;
        padding: 16px;
        font-size: 16px;
        border: none;
        cursor: pointer;
    }

    .search-input {
        width: 70rem;
        height: 4rem;
        position: relative;
        display: inline-block;
    }

    .recipe-image {
        width: 100px;
        height: 100px;
    }

    .recipe-card {
        display: flex;
        justify-content: initial;
        align-items: center;
        height: 20rem;
    }

    * {
        box-sizing: border-box;
    }

    body {
        font-family: Arial, Helvetica, sans-serif;
    }

    .column {
        float: left;
        width: 25%;
        padding: 0 10px;
    }

    .row {
        margin: 0 -5px;
    }

        .row:after {
            content: "";
            display: table;
            clear: both;
        }

    .card {
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        padding: 16px;
        text-align: center;
        background-color: #f1f1f1;
        cursor: pointer;
    }
</style>

@code {
    private string SearchQuery { get; set; } = string.Empty;
    private string SearchInputClass { get; set; } = "search-input"; // Oletusluokka
    private bool isIngredientDropdownVisible = false;
    private bool isKeywordDropdownVisible = false;

    private List<ReseptiRequest>? recipes;
    private List<Ainesosa>? ingredients;
    private List<Avainsana>? keywords;
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetRecipes();
        await GetIngredients();
        await GetKeywords();
    }

    private void ToggleIngredientDropdown()
    {

        isIngredientDropdownVisible = !isIngredientDropdownVisible;
        isKeywordDropdownVisible = false;
    }

    private void ToggleKeywordDropdown()
    {
        isKeywordDropdownVisible = !isKeywordDropdownVisible;
        isIngredientDropdownVisible = false;
    }

    private void CloseDropdownsOnClickOutside()
    {
        isIngredientDropdownVisible = false;
        isKeywordDropdownVisible = false;
    }

    private void SelectRecipe(ReseptiRequest recipe)
    {
        Navigation.NavigateTo($"/recipe/{recipe.Id}");
    }

    private void UpdateSearchQuery()
    {
        var selectedIngredients = ingredients?.Where(i => i.IsChecked).Select(i => i.Nimi) ?? new List<string>();
        var selectedKeywords = keywords?.Where(k => k.IsChecked).Select(k => k.Sana) ?? new List<string>();

        SearchQuery = string.Join(", ", selectedIngredients.Concat(selectedKeywords));
    }

    private void SearchQueryChanged(ChangeEventArgs e)
    {
        // Päivitetään hakukenttä
        var newSearchQuery = e.Value?.ToString() ?? "";

        // Tarkistetaan, onko hakukenttä tyhjä
        if (string.IsNullOrWhiteSpace(newSearchQuery))
        {
            // Jos kenttä on tyhjä, tyhjennetään kaikki valinnat
            foreach (var ingredient in ingredients)
            {
                ingredient.IsChecked = false; // Poistetaan valinta ainesosista
            }

            foreach (var keyword in keywords)
            {
                keyword.IsChecked = false; // Poistetaan valinta avainsanoista
            }

            // Asetetaan hakukentän väri neutraaliksi
            SearchInputClass = "search-input";

            Console.WriteLine("Hakukenttä tyhjeni, tyhjennettiin valitut checkboxit.");
        }
        else
        {
            // Pilkotaan hakusana pilkulla erotettuihin osiin ja siistitään välilyönnit
            var searchTerms = newSearchQuery.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                            .Select(s => s.Trim()) // Poistetaan turhat välilyönnit
                                            .Where(s => !string.IsNullOrWhiteSpace(s)) // Poistetaan tyhjät
                                            .ToList();

            // Etsitään ne hakusanat, jotka on poistettu hakukentästä
            var removedTerms = SearchQuery.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                          .Select(s => s.Trim())
                                          .Except(searchTerms)
                                          .ToList();

            // Käydään läpi poistettavat hakusanat ja poistetaan niiden checkboxit
            foreach (var term in removedTerms)
            {
                // Poistetaan valinta, jos hakusana löytyy ainesosista
                var ingredient = ingredients.FirstOrDefault(i => i.Nimi.Equals(term, StringComparison.OrdinalIgnoreCase));
                if (ingredient != null)
                {
                    ingredient.IsChecked = false; // Poistetaan valinta
                }

                // Poistetaan valinta, jos hakusana löytyy avainsanoista
                var keyword = keywords.FirstOrDefault(k => k.Sana.Equals(term, StringComparison.OrdinalIgnoreCase));
                if (keyword != null)
                {
                    keyword.IsChecked = false; // Poistetaan valinta
                }
            }

            // Tarkistetaan, onko kaikki annetut hakusanat joko ainesosia tai avainsanoja
            bool found = searchTerms.All(term =>
                ingredients.Any(i => i.Nimi.Equals(term, StringComparison.OrdinalIgnoreCase)) ||
                keywords.Any(k => k.Sana.Equals(term, StringComparison.OrdinalIgnoreCase))
            );

            // Päivitetään hakukentän väri
            SearchInputClass = found ? "search-input valid" : "search-input invalid";
        }

        // Päivitetään hakukenttä
        SearchQuery = newSearchQuery;

        // Debuggaus ja UI-päivitys
        Console.WriteLine(SearchQuery);
        StateHasChanged(); // Pakotetaan UI:n päivitys
    }



    private void ToggleIngredientSelection(Ainesosa ingredient, ChangeEventArgs e)
    {
        ingredient.IsChecked = (bool)e.Value;
        UpdateSearchQuery();
        Console.WriteLine($"Hakusanat: {SearchQuery}");
    }
    private void ToggleKeywordSelection(Avainsana keyword, ChangeEventArgs e)
    {
        keyword.IsChecked = (bool)e.Value;
        UpdateSearchQuery();
        Console.WriteLine($"Hakusanat: {SearchQuery}");
    }


    private async Task GetRecipesWithSearchquery()
    {
        try
        {
            Console.WriteLine($"Aloitetaan haku sanalla {SearchQuery}");
            var queryParams = new List<string>();

            // Lisätään kaikki valitut ainesosat checkboxeista
            var selectedIngredients = ingredients
                .Where(a => a.IsChecked)
                .Select(a => $"ainesosat={Uri.EscapeDataString(a.Nimi)}");
            queryParams.AddRange(selectedIngredients);

            // Lisätään kaikki valitut avainsanat checkboxeista
            var selectedKeywords = keywords
                .Where(k => k.IsChecked)
                .Select(k => $"avainsanat={Uri.EscapeDataString(k.Sana)}");
            queryParams.AddRange(selectedKeywords);

            // Tarkistetaan, onko hakukentässä jotain
            if (!string.IsNullOrWhiteSpace(SearchQuery))
            {
                // Pilkotaan hakukentän teksti pilkulla erotettuihin osiin
                var searchTerms = SearchQuery.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                             .Select(s => s.Trim()) // Poistetaan turhat välilyönnit
                                             .Where(s => !string.IsNullOrWhiteSpace(s)) // Poistetaan tyhjät
                                             .ToList();

                foreach (var term in searchTerms)
                {
                    // Jos hakusana löytyy ainesosista, lisätään se
                    if (ingredients.Any(i => i.Nimi.Equals(term, StringComparison.OrdinalIgnoreCase)))
                    {
                        queryParams.Add($"ainesosat={Uri.EscapeDataString(term)}");
                    }

                    // Jos hakusana löytyy avainsanoista, lisätään se
                    if (keywords.Any(k => k.Sana.Equals(term, StringComparison.OrdinalIgnoreCase)))
                    {
                        queryParams.Add($"avainsanat={Uri.EscapeDataString(term)}");
                    }
                }
            }

            // Luodaan querystring API-kutsua varten
            var queryString = queryParams.Any() ? "?" + string.Join("&", queryParams) : string.Empty;

            Console.WriteLine($"API kutsu: /Resepti{queryString}"); // Debuggausta varten

            // Lähetetään pyyntö API:lle
            recipes = await Http.GetFromJsonAsync<List<ReseptiRequest>>($"/Resepti{queryString}");

            // Tarkistetaan, löytyikö reseptejä
            if (recipes == null || !recipes.Any())
            {
                message = "Ei löytynyt reseptejä.";
            }
        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa reseptejä: {ex.Message}";
        }
    }

    private async Task GetRecipes()
    {
        try
        {
            recipes = await Http.GetFromJsonAsync<List<ReseptiRequest>>("/Resepti");

            if (recipes == null || !recipes.Any())
            {
                message = "Ei löytynyt reseptejä.";
            }
        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa reseptejä: {ex.Message}";
        }
    }

    private async Task GetIngredients()
    {
        try
        {
            // Haetaan JSON listana merkkijonoja
            var names = await Http.GetFromJsonAsync<List<string>>("/Resepti/ainesosat");

            if (names != null)
            {
                // Muunnetaan merkkijonolista Ainesosa-olioiksi (Ilman Id:tä)
                ingredients = names.Select(n => new Ainesosa { Nimi = n }).ToList();
            }

            message = ingredients != null && ingredients.Any() ? "Ainesosat ladattu!" : "Ei löytynyt ainesosia.";
        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa ainesosia: {ex.Message}";
        }
    }




    private async Task GetKeywords()
    {
        try
        {
            // Haetaan JSON listana merkkijonoja
            var words = await Http.GetFromJsonAsync<List<string>>("/Resepti/avainsanat");

            if (words != null)
            {
                // Muunnetaan merkkijonolista Avainsana-olioiksi (Ilman Id:tä)
                keywords = words.Select(w => new Avainsana { Sana = w }).ToList();
            }

            message = keywords != null && keywords.Any() ? "Avainsanat ladattu!" : "Ei löytynyt avainsanoja.";
        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa avainsanoja: {ex.Message}";
        }
    }

}