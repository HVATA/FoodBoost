@page "/signup"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@layout SignupLayout
@using RuokaBlazor.Properties.Model
@using RuokaBlazor.Services
@using System.Net.Http;
@using System.Threading.Tasks

<EditForm Model="uusiKayttaja" OnSubmit="HandleSignup" class="signup-layout">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstname">Etunimi</label>
        <InputText id="firstname" @bind-Value="uusiKayttaja.Etunimi" class="form-control" />
    </div>

    <div class="form-group">
        <label for="lastname">Sukunimi</label>
        <InputText id="lastname" @bind-Value="uusiKayttaja.Sukunimi" class="form-control" />
    </div>

    <div class="form-group">
        <label for="email">Sähköpostiosoite</label>
        <InputText id="email" @bind-Value="uusiKayttaja.Sahkopostiosoite" class="form-control" />
    </div>

    <div class="form-group">
        <label for="username">Käyttäjätunnus</label>
        <InputText id="username" @bind-Value="uusiKayttaja.Nimimerkki" class="form-control" />
    </div>

    <div class="form-group">
        <label for="password">Salasana</label>
        <InputText id="password" @bind-Value="uusiKayttaja.Salasana" type="password" class="form-control" />
    </div>

    <div style="margin-bottom: 15px;"></div>

    <button type="submit" class="btn btn-primary">Rekisteröidy</button>

    <div style="margin-bottom: 15px;"></div>

    <div>
        <button @onclick="BackToLogin" class="btn btn-link">Peruuta</button>
    </div>

</EditForm>

<p>@message</p>

@code {
    private Kayttaja uusiKayttaja = new();
    private Kayttaja kayttaja = new();
    private string message = string.Empty;

    private async Task HandleSignup()
    {
        try
        {
            uusiKayttaja.Kayttajataso = "user";
            HttpResponseMessage response = await Http.PostAsJsonAsync("Kayttaja/LisaaKayttaja", uusiKayttaja);

            if (response.IsSuccessStatusCode)
            {
                string responseString = await response.Content.ReadAsStringAsync();
                if (responseString.Contains("Sähköposti on jo käytössä!!!"))
                {
                    message = $"Rekisteröinti epäonnistui. Virhe: {responseString}";
                }
                else
                {
                    message = "Rekisteröinti onnistui!";
                    HandleLogin();
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Virhe rekisteröinnissä: {ex.Message}";
        }
    }

    private async Task HandleLogin()
    {
        kayttaja = uusiKayttaja;
        try
        {
            var response = await Http.GetAsync($"Kayttaja/Tunnistautumistiedot/{kayttaja.Salasana}/{kayttaja.Sahkopostiosoite}");

            if (response.IsSuccessStatusCode)
            {
                var userData = await response.Content.ReadFromJsonAsync<UserData>();
                if (userData != null)
                {
                    message = "Kirjautuminen onnistui";
                    await AuthenticationStateProvider.Login(userData);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    message = "Käyttäjätietojen hakeminen epäonnistui.";
                }
            }
            else
            {
                message = "Virheellinen sähköpostiosoite tai salasana";
            }
        }
        catch (Exception ex)
        {
            message = "Error during login: " + ex.Message;
        }
    }

    private void BackToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}
