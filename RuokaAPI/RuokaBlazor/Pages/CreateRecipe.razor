@page "/createRecipe"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@using System.Text.Json
@using RuokaBlazor.Services
@using RuokaBlazor.Properties.Model

<h1>Luo uusi resepti</h1>

<div class="form-container">
    <EditForm Model="uusiResepti" OnValidSubmit="TallennaResepti">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Reseptin nimi -->
        <div>
            <label for="nimi">Reseptin nimi:</label>
            <InputText id="nimi" @bind-Value="uusiResepti.Nimi" class="form-control" />
        </div>

        <!-- Valmistuskuvaus -->
        <div>
            <label for="valmistuskuvaus">Valmistuskuvaus:</label>
            <InputTextArea id="valmistuskuvaus" @bind-Value="uusiResepti.Valmistuskuvaus" class="form-control" />
        </div>

        <!-- Drop box kuvien valintaan -->
        <div>
            <label for="kuva">Valitse kuva:</label>
            <InputFile id="kuva" OnChange="KuvaValittu" class="form-control" />
            @if (!string.IsNullOrWhiteSpace(kuvanEsikatselu))
            {
                <div class="image-preview">
                    <img src="@kuvanEsikatselu" alt="Valittu kuva" class="preview-image" />
                </div>
            }
        </div>

        <!-- Ainesosat -->
        <h2>Ainesosat</h2>
        @for (int i = 0; i < uusiResepti.Ainesosat.Length; i++)
        {
            var index = i;
            <div class="input-group">
                <InputText @bind-Value="uusiResepti.Ainesosat[index].Ainesosa" class="form-control" placeholder="Ainesosa" />
                <InputText @bind-Value="uusiResepti.Ainesosat[index].Maara" class="form-control" placeholder="Määrä" />
                <button type="button" class="btn btn-danger" @onclick="() => PoistaAinesosa(index)">Poista</button>
            </div>
        }
        <button type="button" class="btn btn-secondary mt-2" @onclick="LisaaAinesosa">+ Lisää ainesosa</button>

        <!-- Avainsanat -->
        <h2>Avainsanat</h2>
        @for (int i = 0; i < uusiResepti.Avainsanat.Length; i++)
        {
            var index = i;
            <div class="input-group">
                <InputText @bind-Value="uusiResepti.Avainsanat[index]" class="form-control" placeholder="Avainsana" />
                <button type="button" class="btn btn-danger" @onclick="() => PoistaAvainsana(index)">Poista</button>
            </div>
        }
        <button type="button" class="btn btn-secondary mt-2" @onclick="LisaaAvainsana">+ Lisää avainsana</button>

        <!-- Katseluoikeus -->
        <div class="form-group mt-3">
            <label for="katseluoikeus">Katseluoikeus:</label>
            <InputText id="katseluoikeus" @bind-Value="uusiResepti.Katseluoikeus" class="form-control" />
        </div>

        <!-- Tallenna -->
        <button type="submit" class="btn btn-primary mt-3">Tallenna</button>
    </EditForm>
</div>
<style>
    .image-preview {
    margin-top: 10px;
    }

    .preview-image {
    max-width: 200px;
    height: auto;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
</style>
@code {
    private ReseptiRequest uusiResepti = new();
    private string? kuvanEsikatselu;

    protected override async Task OnInitializedAsync()
    {
        uusiResepti.Ainesosat = new AinesosanMaaraDto[] { new AinesosanMaaraDto() };
        uusiResepti.Avainsanat = new string[] { string.Empty };

        // Haetaan kirjautuneen käyttäjän tiedot
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var tekijaId = user.FindFirst(c => c.Type == "userId")?.Value;
            if (int.TryParse(tekijaId, out var id))
            {
                uusiResepti.TekijaId = id;
            }
        }
    }

    private async Task KuvaValittu(InputFileChangeEventArgs e)
    {
        try
        {
            var tiedosto = e.File;
            using var stream = tiedosto.OpenReadStream(5 * 1024 * 1024); // Maksimikoko: 5MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var kuvaBase64 = Convert.ToBase64String(ms.ToArray());

            // Tallennetaan kuva reseptiin ja esikatseluun
            uusiResepti.Kuva1 = $"data:{tiedosto.ContentType};base64,{kuvaBase64}";
            kuvanEsikatselu = uusiResepti.Kuva1;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe kuvan käsittelyssä: {ex.Message}");
        }
    }

    private void LisaaAinesosa()
    {
        uusiResepti.Ainesosat = uusiResepti.Ainesosat.Append(new AinesosanMaaraDto()).ToArray();
    }

    private void PoistaAinesosa(int index)
    {
        if (index >= 0 && index < uusiResepti.Ainesosat.Length)
        {
            uusiResepti.Ainesosat = uusiResepti.Ainesosat.Where((_, i) => i != index).ToArray();
        }
    }

    private void LisaaAvainsana()
    {
        uusiResepti.Avainsanat = uusiResepti.Avainsanat.Append(string.Empty).ToArray();
    }

    private void PoistaAvainsana(int index)
    {
        if (index >= 0 && index < uusiResepti.Avainsanat.Length)
        {
            uusiResepti.Avainsanat = uusiResepti.Avainsanat.Where((_, i) => i != index).ToArray();
        }
    }

    private async Task TallennaResepti()
    {
        try
        {
            // Poistetaan tyhjät arvot
            uusiResepti.Ainesosat = uusiResepti.Ainesosat
                .Where(a => !string.IsNullOrWhiteSpace(a.Ainesosa) && !string.IsNullOrWhiteSpace(a.Maara))
                .ToArray();

            uusiResepti.Avainsanat = uusiResepti.Avainsanat
                .Where(a => !string.IsNullOrWhiteSpace(a))
                .ToArray();

            Console.WriteLine("Tallennetaan resepti: " + JsonSerializer.Serialize(uusiResepti));

            // Lähetetään tiedot API:lle
            var response = await Http.PostAsJsonAsync("resepti", uusiResepti);

            // Tarkistetaan, onnistuiko pyyntö
            if (response.IsSuccessStatusCode)
            {
                var responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Palautettu JSON: " + responseBody);

                // Tarkistetaan, palauttaako API JSON-objektin vai pelkän ID:n
                if (!string.IsNullOrWhiteSpace(responseBody))
                {
                    var createdRecipe = JsonSerializer.Deserialize<ReseptiResponse>(responseBody);

                    if (createdRecipe != null)
                    {
                        Console.WriteLine("Luodun reseptin ID: " + createdRecipe.Id);
                        Navigation.NavigateTo($"/recipe/{createdRecipe.Id}"); // Siirrytään reseptisivulle
                    }
                    else
                    {
                        Console.WriteLine("Virhe: Ei voitu deserialisoida reseptiä.");
                    }
                }
            }
            else
            {
                Console.WriteLine("Reseptin tallennus epäonnistui: " + response.StatusCode);
            }
        }
        catch (JsonException jsonEx)
        {
            Console.WriteLine($"JSON-virhe tallennuksessa: {jsonEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Poikkeus tallennuksessa: {ex.Message}");
        }
    }

}
