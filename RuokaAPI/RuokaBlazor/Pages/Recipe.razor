@page "/recipe/{Id:int}"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@using RuokaBlazor.Properties.Model
@using RuokaBlazor.Services
@using System.Text.Json
@using System.Security.Claims

@if (virheViesti != null)
{
    <p>@virheViesti</p>
}
else if (resepti == null)
{
    <p>Ladataan reseptin tietoja...</p>
}
else
{
    <div class="recipe-container">
        <div class="recipe-header">
            <!-- Reseptin otsikko -->
            <div class="recipe-title-container">
                <h1 class="recipe-title">@resepti?.Nimi</h1>
            </div>

            <!-- Reseptin kuva -->
            <div class="recipe-image-container">
                <img src="@resepti?.Kuva1" alt="@resepti?.Nimi" class="recipe-image" />
            </div>
        </div>

        <!-- Napit näkyvät vain, jos käyttäjä on admin tai reseptin tekijä -->
        @if (kayttajallaOikeudet)
        {
            <div class="action-buttons">
                <button class="btn btn-primary" @onclick="MuokkaaResepti">Muokkaa</button>
                <button class="btn btn-danger" @onclick="PoistaResepti">Poista</button>
            </div>
        }

        <!-- Avainsanat -->
        <div class="tags">
            @if (resepti?.Avainsanat?.Any() == true)
            {
                @foreach (var tag in resepti.Avainsanat)
                {
                    <span class="tag">@tag</span>
                }
            }
        </div>

        <!-- Ainesosat ja valmistuskuvaus -->
        <div class="info-container">
            <div class="ingredients">
                <h2>Ainesosat</h2>
                <ul>
                    @foreach (var ainesosa in resepti.Ainesosat)
                    {
                        <li>@ainesosa.Ainesosa: @ainesosa.Maara</li>
                    }
                </ul>
            </div>
            <div class="instructions">
                <h2>Valmistuskuvaus</h2>
                <p>@resepti.Valmistuskuvaus</p>
            </div>
        </div>

        <!-- Arvostelulomake -->
        @if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            <div class="review-form">
                <h3>Jätä arvostelu</h3>
                <EditForm Model="uusiArvostelu" OnValidSubmit="LisaaArvostelu">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div>
                        <label for="numeroarvostelu">Arvosana (1-5):</label>
                        <InputNumber id="numeroarvostelu" @bind-Value="uusiArvostelu.Numeroarvostelu" class="form-control" />
                    </div>

                    <div>
                        <label for="vapaateksti">Kommentti:</label>
                        <InputTextArea id="vapaateksti" @bind-Value="uusiArvostelu.Vapaateksti" class="form-control" />
                    </div>

                    <button type="submit" class="btn btn-primary">Lähetä</button>
                    <button type="button" class="btn btn-primary" @onclick="OpenShareEmailModal">Jaa sähköpostitse</button>
                </EditForm>
            </div>
        }
        else
        {
            <p>Kirjaudu sisään jättääksesi arvostelun.</p>
        }

        <!-- Arvostelut -->
        <div class="reviews">
            <h2>Arvostelut</h2>
            @if (resepti.Arvostelut?.Any() == true)
            {
                @foreach (var arvostelu in resepti.Arvostelut)
                {
                    <div class="review">
                        <p><strong>@arvostelu.ArvostelijanNimimerkki</strong> (@arvostelu.Numeroarvostelu/5)</p>
                        <p>@arvostelu.Vapaateksti</p>
                    </div>
                }
            }
            else
            {
                <p>Ei arvosteluja.</p>
            }
        </div>
    </div>

    <!-- Modal-ikkuna sähköpostin jakamista varten -->
    <div class="modal" style="display:@(modalVisible ? "block" : "none")">
        <div class="modal-content">
            <span class="close" @onclick="CloseModal">&times;</span>
            <h2>Jaa resepti sähköpostitse</h2>
            <div>
                <label for="emailInput">Sähköpostiosoite:</label>
                <InputText id="emailInput" @bind-Value="deliveryEmail" class="form-control" placeholder="Syötä sähköpostiosoite" />
            </div>
            <div>
                @if (shareRecipeSuccess)
                {
                    <button class="btn btn-secondary" @onclick="CloseModal">Sulje</button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="ShareRecipeEmail">Jaa</button>
                    <button class="btn btn-secondary" @onclick="CloseModal">Peruuta</button>
                }
            </div>
            <p>@message</p>
        </div>
    </div>
}

<style>
    .recipe-header {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 2rem;
    }

    .recipe-title-container {
        text-align: center;
        margin-bottom: 1rem;
    }

    .recipe-title {
        font-size: 2.5rem;
        margin: 0;
    }

    .recipe-image-container {
        display: flex;
        justify-content: center;
        width: 100%;
    }

    .recipe-image {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .tags {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .tag {
        background-color: #f0f0f0;
        padding: 0.5rem 1rem;
        border-radius: 15px;
        font-size: 0.9rem;
        color: #555;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-bottom: 1.5rem;
    }

    .info-container {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        margin-top: 1rem;
    }

    .ingredients, .instructions {
        flex: 1 1 45%;
        min-width: 300px;
        padding: 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .reviews {
        margin-top: 2rem;
    }

    .review {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        background-color: #f9f9f9;
    }

    .review-form {
        margin-top: 2rem;
    }

    /* Modal style */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex; /* Käytetään flexboxia */
        justify-content: center; /* Keskittää modaalin vaakasuunnassa */
        align-items: center; /* Keskittää modaalin pystysuunnassa */
        z-index: 999; /* Varmistaa, että modaalin taso on tarpeeksi korkea muiden elementtien yläpuolella */
    }

    .modal-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        width: 300px; /* Voit säätää tätä tarpeen mukaan */
    }

    .close {
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
        font-size: 1.5rem;
    }

</style>

@code {
    [Parameter] public int Id { get; set; }
    private ReseptiResponse? resepti;
    private bool kayttajallaOikeudet = false;
    private string? virheViesti;
    private ArvosteluRequest uusiArvostelu = new();
    private ClaimsPrincipal user;
    private string message = string.Empty;
    private string deliveryEmail;
    private bool modalVisible = false;
    private Kayttaja kayttaja;
    private bool shareRecipeSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        // Haetaan kirjautuneen käyttäjän tiedot
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
        var userFirstname = user.FindFirst(ClaimTypes.GivenName)?.Value;
        var userLastname = user.FindFirst(ClaimTypes.Surname)?.Value;
        var username = user.FindFirst("Nimimerkki")?.Value;
        var userPassword = user.FindFirst("Salasana")?.Value;

        kayttaja = new Kayttaja
            {
                Id = int.Parse(userId ?? "0"),
                Etunimi = userFirstname,
                Sukunimi = userLastname,
                Sahkopostiosoite = userEmail,
                Nimimerkki = username,
                Salasana = userPassword,
                Kayttajataso = userRole
            };


        var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
        try
        {
            // Hae resepti API:sta
            resepti = await Http.GetFromJsonAsync<ReseptiResponse>($"resepti/{Id}", cts.Token);
            if (resepti == null)
            {
                virheViesti = "Valittua reseptiä ei löydy.";
                return;
            }

            // Tarkista käyttäjän oikeudet
            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                if (int.TryParse(userId, out var id))
                {
                    // Käyttäjällä on oikeudet, jos hän on admin tai reseptin tekijä
                    kayttajallaOikeudet = userRole == "admin" || resepti.TekijaId == id;
                    Console.WriteLine(kayttajallaOikeudet.ToString());//Tarkistus
                }
            }
        }
        catch (OperationCanceledException)
        {
            virheViesti = "Reseptin lataaminen kesti liian kauan.";
        }
        catch (Exception ex)
        {
            virheViesti = $"Virhe reseptin tietojen lataamisessa: {ex.Message}";
        }
    }
    private async Task ShareRecipeEmail()
    {
        try
        {

            // Muodostetaan oikea URL
            string url = $"kayttaja/LahetaResepti/{resepti.Id}/{deliveryEmail}";

            // Koska backend hyväksyy vain PUT, käytä PutAsJsonAsync
            HttpResponseMessage response = await Http.PutAsJsonAsync(url, kayttaja);

            if (response.IsSuccessStatusCode)
            {
                message = "Resepti lähetettiin onnistuneesti sähköpostiin!";
                shareRecipeSuccess = true;  // Asetetaan true, kun onnistuu
                
            }
            else
            {
                message = await response.Content.ReadAsStringAsync(); // Backendin virheilmoitus
            }
        }
        catch (Exception ex)
        {
            message = "Virhe: " + ex.Message;
        }

    }


    private async Task PoistaResepti()
    {
        if (resepti == null) return;

        var confirm = await JSRuntime.InvokeAsync<bool>("window.confirm", "Haluatko varmasti poistaa tämän reseptin?");
        if (confirm)
        {
            try
            {
                var response = await Http.DeleteAsync($"resepti/{resepti.Id}");
                if (response.IsSuccessStatusCode)
                {
                    Navigation.NavigateTo("/Home");
                }
                else
                {
                    Console.WriteLine($"Virhe poistamisessa: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Poikkeus poistamisessa: {ex.Message}");
            }
        }
    }

    private void MuokkaaResepti()
    {
        Navigation.NavigateTo($"/editRecipe/{resepti?.Id}");
    }

    private async Task LisaaArvostelu()
    {
        if (resepti == null) return;

        uusiArvostelu.ArvostelijanId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        uusiArvostelu.ArvostelijanNimimerkki = user.Identity.Name;

        try
        {
            var response = await Http.PostAsJsonAsync($"resepti/{resepti.Id}/arvostelut", uusiArvostelu);
            if (response.IsSuccessStatusCode)
            {
                // Lisää uusi arvostelu paikallisesti
                var uusiArvosteluPaikallinen = new Arvostelu
                    {
                        ArvostelijanId = uusiArvostelu.ArvostelijanId,
                        ArvostelijanNimimerkki = uusiArvostelu.ArvostelijanNimimerkki,
                        Numeroarvostelu = uusiArvostelu.Numeroarvostelu,
                        Vapaateksti = uusiArvostelu.Vapaateksti
                    };
                resepti.Arvostelut = resepti.Arvostelut.Append(uusiArvosteluPaikallinen).ToArray();
                uusiArvostelu = new ArvosteluRequest(); // Tyhjennä lomake
                StateHasChanged(); // Päivitä komponentin tila
            }
            else
            {
                Console.WriteLine($"Virhe arvostelun lisäämisessä: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Poikkeus arvostelun lisäämisessä: {ex.Message}");
        }
    }

    private void OpenShareEmailModal()
    {
        modalVisible = true;
    }

    private void CloseModal()
    {
        modalVisible = false;
    }
}
