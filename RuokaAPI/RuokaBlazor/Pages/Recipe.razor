@page "/recipe/{Id:int}"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@using RuokaBlazor.Properties.Model
@using RuokaBlazor.Services
@using System.Text.Json

@if (virheViesti != null)
{
    <p>@virheViesti</p>
}
else if (resepti == null)
{
    <p>Ladataan reseptin tietoja...</p>
}
else
{
    <div class="recipe-container">
        <div class="recipe-header">
            <!-- Reseptin otsikko -->
            <div class="recipe-title-container">
                <h1 class="recipe-title">@resepti?.Nimi</h1>
            </div>

            <!-- Reseptin kuva -->
            <div class="recipe-image-container">
                <img src="@resepti?.Kuva1" alt="@resepti?.Nimi" class="recipe-image" />
            </div>
        </div>

        <!-- Napit näkyvät vain, jos käyttäjä on admin tai reseptin tekijä -->
        @if (kayttajallaOikeudet)
        {
            <div class="action-buttons">
                <button class="btn btn-primary" @onclick="MuokkaaResepti">Muokkaa</button>
                <button class="btn btn-danger" @onclick="PoistaResepti">Poista</button>
            </div>
        }

        <!-- Avainsanat -->
        <div class="tags">
            @if (resepti?.Avainsanat?.Any() == true)
            {
                @foreach (var tag in resepti.Avainsanat)
                {
                    <span class="tag">@tag</span>
                }
            }
        </div>

        <!-- Ainesosat ja valmistuskuvaus -->
        <div class="info-container">
            <div class="ingredients">
                <h2>Ainesosat</h2>
                <ul>
                    @foreach (var ainesosa in resepti.Ainesosat)
                    {
                        <li>@ainesosa.Ainesosa: @ainesosa.Maara</li>
                    }
                </ul>
            </div>
            <div class="instructions">
                <h2>Valmistuskuvaus</h2>
                <p>@resepti.Valmistuskuvaus</p>
            </div>
        </div>
    </div>
}

<style>
    .recipe-header {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 2rem;
    }

    .recipe-title-container {
        text-align: center;
        margin-bottom: 1rem;
    }

    .recipe-title {
        font-size: 2.5rem;
        margin: 0;
    }

    .recipe-image-container {
        display: flex;
        justify-content: center;
        width: 100%;
    }

    .recipe-image {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .tags {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .tag {
        background-color: #f0f0f0;
        padding: 0.5rem 1rem;
        border-radius: 15px;
        font-size: 0.9rem;
        color: #555;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-bottom: 1.5rem;
    }

    .info-container {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        margin-top: 1rem;
    }

    .ingredients, .instructions {
        flex: 1 1 45%;
        min-width: 300px;
        padding: 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
</style>

@code {
    [Parameter] public int Id { get; set; }
    private ReseptiResponse? resepti;
    private bool kayttajallaOikeudet = false;
    private string? virheViesti;

    protected override async Task OnInitializedAsync()
    {
        var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
        try
        {
            // Hae resepti API:sta
            resepti = await Http.GetFromJsonAsync<ReseptiResponse>($"resepti/{Id}", cts.Token);
            if (resepti == null)
            {
                virheViesti = "Valittua reseptiä ei löydy.";
                return;
            }
            // Tarkista käyttäjän oikeudet
            kayttajallaOikeudet = await TarkistaKayttajanOikeudet();
        }
        catch (OperationCanceledException)
        {
            virheViesti = "Reseptin lataaminen kesti liian kauan.";
        }
        catch (Exception ex)
        {
            virheViesti = $"Virhe reseptin tietojen lataamisessa: {ex.Message}";
        }
    }

    private async Task PoistaResepti()
    {
        if (resepti == null) return;

        var confirm = await JSRuntime.InvokeAsync<bool>("window.confirm", "Haluatko varmasti poistaa tämän reseptin?");
        if (confirm)
        {
            try
            {
                var response = await Http.DeleteAsync($"resepti/{resepti.Id}");
                if (response.IsSuccessStatusCode)
                {
                    Navigation.NavigateTo("/");
                }
                else
                {
                    Console.WriteLine($"Virhe poistamisessa: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Poikkeus poistamisessa: {ex.Message}");
            }
        }
    }

    private void MuokkaaResepti()
    {
        Navigation.NavigateTo($"/editRecipe/{resepti?.Id}");
    }

    private async Task<bool> TarkistaKayttajanOikeudet()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            // Tarkista admin-rooli
            if (user.IsInRole("Admin"))
            {
                return true;
            }

            // Tarkista reseptin tekijä
            var tekijaIdClaim = user.FindFirst(c => c.Type == "userId")?.Value;
            if (int.TryParse(tekijaIdClaim, out var userId))
            {
                return userId == resepti?.TekijaId;
            }
        }

        return false;
    }
}
