@page "/accounts"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider CustomAuthStateProvider
@using RuokaBlazor.Properties.Model
@using System.Security.Claims
@using RuokaBlazor.Services
@using System.Text.Json;

<div>
    <div class="container">
        <div class="form-container">
            <EditForm Model="kayttaja">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="firstname">Etunimi</label>
                    <InputText id="firstname" @bind-Value="kayttaja.Etunimi" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="lastname">Sukunimi</label>
                    <InputText id="lastname" @bind-Value="kayttaja.Sukunimi" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="email">Sähköpostiosoite</label>
                    <InputText id="email" @bind-Value="kayttaja.Sahkopostiosoite" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="username">Käyttäjätunnus</label>
                    <InputText id="username" @bind-Value="kayttaja.Nimimerkki" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="password">Salasana</label>
                    <InputText id="password" @bind-Value="kayttaja.Salasana" class="form-control" />
                </div>
                <!-- Näytetään nämä kentät vain, jos käyttäjä on admin -->
                @if (user.IsInRole("admin"))
                {
                    <div class="form-group">
                        <label for="role">Käyttäjätaso</label>
                        <InputText id="role" @bind-Value="kayttaja.Kayttajataso" class="form-control" />
                    </div>
                }
                else
                {
                    <!-- Kentät pysyvät piilossa, mutta niiden arvot ovat edelleen käytettävissä -->
                    <InputText style="display: none;" id="hidden-password" @bind-Value="kayttaja.Salasana" />
                    <InputText style="display: none;" id="hidden-role" @bind-Value="kayttaja.Kayttajataso" />
                }


                <!-- Nyt OnValidSubmit on asetettu vain Päivitä-painikkeelle -->
                <button type="submit" class="btn btn-primary" @onclick="async () => await UpdateUser()">Päivitä</button>

                <!-- Poista-painike ei käytä OnValidSubmit:ia vaan kutsuu suoraan DeleteUser-metodia -->
                <button type="button" class="btn btn-danger" @onclick="async () => await DeleteUser()">Poista</button>
            </EditForm>

        </div>

        @if (user.IsInRole("admin"))
        {
            <div class="user-list">
                <h3>Käyttäjät</h3>
                <ul>
                    @foreach (var user in users)
                    {
                        <li @onclick="() => SelectUser(user)" class="user-item">@user.Etunimi</li>
                    }
                </ul>
            </div>
        }
    </div>
</div>

<style>
    
    .admin-only{
        display: block;
    }

    .form-group {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

        .form-group label {
            margin-right: 10px;
            min-width: 120px;
        }

    .btn-primary {
        background-color: #3498db;
    }

    .btn-danger {
        background-color: #e74c3c;
    }

    .btn:hover {
        opacity: 0.8;
    }
</style>

<p>@message</p>

@code {
    private List<Kayttaja> users = new();
    private Kayttaja kayttaja = new();
    private string message = string.Empty;
    private ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await CustomAuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
        var userFirstname = user.FindFirst(ClaimTypes.GivenName)?.Value;
        var userLastname = user.FindFirst(ClaimTypes.Surname)?.Value;
        var username = user.FindFirst("Nimimerkki")?.Value;
        var userPassword = user.FindFirst("Salasana")?.Value;

        Console.WriteLine($"User role: {userRole}, Email: {userEmail}, User ID: {userId}");

        if (user.IsInRole("admin"))
        {
            await getUsers(int.Parse(userId), userPassword, userEmail); // Haetaan kaikki käyttäjät adminille
        }
        else
        {
            kayttaja.Id = int.Parse(userId ?? "0");
            kayttaja.Etunimi = userFirstname;
            kayttaja.Sukunimi = userLastname;
            kayttaja.Sahkopostiosoite = userEmail;
            kayttaja.Nimimerkki = username;
            kayttaja.Salasana = userPassword;
            kayttaja.Kayttajataso = userRole;
        }
    }
    private async Task getUsers(int Id, string salasana, string sahkopostiosoite)
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<Kayttaja>>($@"Kayttaja/Haekaikki/{Id}/{salasana}/{sahkopostiosoite}");
        }
        catch (Exception ex)
        {
            message = "Käyttäjien lataaminen epäonnistui: " + ex.Message;
        }
    }

    private void SelectUser(Kayttaja selectedUser)
    {
        kayttaja = new Kayttaja
            {
                Id = selectedUser.Id,
                Etunimi = selectedUser.Etunimi,
                Sukunimi = selectedUser.Sukunimi,
                Salasana = selectedUser.Salasana,
                Kayttajataso = selectedUser.Kayttajataso,
                Sahkopostiosoite = selectedUser.Sahkopostiosoite,
                Nimimerkki = selectedUser.Nimimerkki,
            };
    }
    private async Task getUser()
    {
        try
        {
            var response = await Http.GetAsync($"Kayttaja/Tunnistautumistiedot/{kayttaja.Salasana}/{kayttaja.Sahkopostiosoite}");

            if (response.IsSuccessStatusCode)
            {
                var userData = await response.Content.ReadFromJsonAsync<UserData>();
                if (userData != null)
                {
                    message = "Kirjautuminen onnistui";
                    await CustomAuthStateProvider.Login(userData);
                }
                else
                {
                    message = "Käyttäjätietojen hakeminen epäonnistui.";
                }
            }
            else
            {
                message = "Virheellinen sähköpostiosoite tai salasana";
            }
        }
        catch (Exception ex)
        {
            message = "Error during login: " + ex.Message;
        }
    }
    private async Task UpdateUser()
    {
        if (user.IsInRole("admin"))
        {
            var updatedUser = new Kayttaja
                {
                    Etunimi = kayttaja.Etunimi,
                    Id = kayttaja.Id,
                    Kayttajataso = kayttaja.Kayttajataso,
                    Nimimerkki = kayttaja.Nimimerkki,
                    Sahkopostiosoite = kayttaja.Sahkopostiosoite,
                    Salasana = kayttaja.Salasana,
                    Sukunimi = kayttaja.Sukunimi,
                };

            try
            {
                var response = await Http.PutAsJsonAsync($"Kayttaja/PaivitaTietoja", updatedUser);

                if (response.IsSuccessStatusCode)
                {
                    message = "Käyttäjätiedot päivitetty!";
                    await getUsers(int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "0"), user.FindFirst("Salasana")?.Value, user.FindFirst(ClaimTypes.Email)?.Value ?? "");
                    StateHasChanged(); // Päivitä käyttöliittymä
                }
                else
                {
                    message = "Päivitys epäonnistui. Virheellinen vastaus backendiltä.";
                    var responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error: {responseContent}");
                }
            }
            catch (Exception ex)
            {
                message = "Virhe: " + ex.Message;
                Console.WriteLine($"Exception: {ex.Message}");
            }
        }
        else //Jos user päivittää itseään
        {
            var updatedUser = new Kayttaja
                {
                    Etunimi = kayttaja.Etunimi,
                    Id = kayttaja.Id,
                    Kayttajataso = "user", // Oletetaan, että tavallisella käyttäjällä on rooli 'user'
                    Nimimerkki = kayttaja.Nimimerkki,
                    Sahkopostiosoite = kayttaja.Sahkopostiosoite,
                    Salasana = kayttaja.Salasana,
                    Sukunimi = kayttaja.Sukunimi,
                };

            try
            {
                var response = await Http.PutAsJsonAsync($"Kayttaja/PaivitaTietoja", updatedUser);

                if (response.IsSuccessStatusCode)
                {
                    message = "Käyttäjätiedot päivitetty!";
                    await CustomAuthStateProvider.Logout();
                    
                    // Haetaan päivitetyt tiedot ja päivitetään kayttaja.Kayttajataso
                    var res = await Http.GetAsync($"Kayttaja/Tunnistautumistiedot/{kayttaja.Salasana}/{kayttaja.Sahkopostiosoite}");

                    if (res.IsSuccessStatusCode)
                    {
                        var userData = await res.Content.ReadFromJsonAsync<UserData>();
                        if (userData != null)
                        {
                            message = "Kirjautuminen onnistui";
                            await CustomAuthStateProvider.Login(userData);
                        }
                        else
                        {
                            message = "Käyttäjätietojen hakeminen epäonnistui.";
                        }
                    }
                    else
                    {
                        message = "Virheellinen sähköpostiosoite tai salasana";
                    }
                    StateHasChanged(); // Päivitä käyttöliittymä
                }
                else
                {
                    message = "Päivitys epäonnistui. Virheellinen vastaus backendiltä.";
                    var responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error: {responseContent}");
                }
            }
            catch (Exception ex)
            {
                message = "Virhe: " + ex.Message;
                Console.WriteLine($"Exception: {ex.Message}");
            }
        }

    }
    private async Task DeleteUser() 
    {
        if (kayttaja.Id == 0 || string.IsNullOrEmpty(kayttaja.Sahkopostiosoite) || string.IsNullOrEmpty(kayttaja.Salasana))
        {
            message = "Poistaminen epäonnistui: Puuttuvat tiedot.";
            return;
        }

        try
        {
            var response = await Http.DeleteAsync($@"Kayttaja/Poista/{kayttaja.Id}/{kayttaja.Sahkopostiosoite}/{kayttaja.Salasana}");

            if (response.IsSuccessStatusCode)
            {
                message = "Käyttäjä poistettu!";
                await getUsers(int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "0"), user.FindFirst("Salasana")?.Value, user.FindFirst(ClaimTypes.Email)?.Value ?? "");
                kayttaja = new Kayttaja(); // Tyhjennä lomake
                StateHasChanged(); // Päivitä käyttöliittymä
            }
            else
            {
                message = "Poistaminen epäonnistui. Virheellinen vastaus backendiltä.";
            }
        }
        catch (Exception ex)
        {
            message = "Virhe: " + ex.Message;
        }
    }
}
