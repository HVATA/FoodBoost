@using System.Security.Claims
@using RuokaBlazor.Services
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="page">
    <main>
        <div class="main-header">
            <a href="/home">RuokaBoost-Home</a>
            <a href="/recipe">Omat reseptit</a>
            <a href="/settings">Asetukset</a>
            @if (isUserAdminOrUser)
            {
                <a href="/accounts">Käyttäjähallinta</a>
            }
            <a href="/favorites">Suosikit</a>
            <a href="/" @onclick="Logout">Kirjaudu ulos</a>
        </div>
        <div class="main-body">
            @Body
        </div>
    </main>
</div>

<style>
    .main-header {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f4f4f4;
    }

    .main-body {
        display: flex;
        justify-content: center;
        background-color: #f4f4f4;
    }
</style>

@code {
    private bool isUserAdminOrUser;
    private ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        // Tarkista roolit ClaimTypes.Role -claimista
        var role = user.FindFirst(ClaimTypes.Role)?.Value;
        Console.WriteLine($"User role: {role}");

        isUserAdminOrUser = user.IsInRole("admin") || user.IsInRole("user");

        Console.WriteLine($"User roles: Admin={user.IsInRole("admin")}, User={user.IsInRole("user")}, IsAdminOrUser={isUserAdminOrUser}");
        Console.WriteLine($"Is user authenticated: {user.Identity.IsAuthenticated}");
    }

    private async Task Logout()
    {
        // Poista kirjautumistiedot localStoragesta ja päivitä autentikointitila
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        await customAuthStateProvider.Logout();
        Console.WriteLine("Ulos kirjautuminen onnistui!");
        // Suuntaa käyttäjä takaisin kirjautumissivulle (tai haluamaasi sivuun)
        Navigation.NavigateTo("/"); // Tämä on esimerkki, voit ohjata mihin tahansa tarpeen mukaan
    }
}
