@page "/editRecipe/{Id:int}"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@using System.Text.Json
@using FoodBlazor.Services
@using FoodBlazor.Properties.Model
@using System.Security.Claims

<h1>Muokkaa reseptiä</h1>

@if (virheViesti != null)
{
    <p>@virheViesti</p>
}
else if (resepti == null)
{
    <p>Ladataan reseptin tietoja...</p>
}
else
{
    <div class="container">
        <EditForm Model="resepti" OnValidSubmit="TallennaResepti">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Reseptin nimi -->
            <div>
                <label for="nimi">Reseptin nimi:</label>
                <InputText id="nimi" @bind-Value="resepti.Nimi" class="form-control" />
            </div>

            <!-- Valmistuskuvaus -->
            <div>
                <label for="valmistuskuvaus">Valmistuskuvaus:</label>
                <InputTextArea id="valmistuskuvaus" @bind-Value="resepti.Valmistuskuvaus" class="form-control" />
            </div>

            <!-- Drop box kuvien valintaan -->
            <div>
                <label for="kuva">Valitse kuva:</label>
                <InputFile id="kuva" OnChange="KuvaValittu" class="form-control" />
                @if (!string.IsNullOrWhiteSpace(kuvanEsikatselu))
                {
                    <div class="image-preview">
                        <img src="@kuvanEsikatselu" alt="Valittu kuva" class="preview-image" />
                        <button type="button" class="btn btn-danger mt-2" @onclick="PoistaKuva">Poista kuva</button>
                    </div>
                }
            </div>

            <!-- Ainesosat -->
            <h2>Ainesosat</h2>
            @for (int i = 0; i < resepti.Ainesosat.Length; i++)
            {
                var index = i;
                <div class="ingredient-row">
                    <InputText @bind-Value="resepti.Ainesosat[index].Ainesosa" class="form-control" placeholder="Ainesosa" />
                    <InputText @bind-Value="resepti.Ainesosat[index].Maara" class="form-control" placeholder="Määrä" />
                    <button type="button" class="remove-button" @onclick="() => PoistaAinesosa(index)">-</button>
                </div>
            }
            <button type="button" class="btn btn-primary" @onclick="LisaaAinesosa">+ Lisää ainesosa</button>

            <!-- Avainsanat -->
            <h2>Avainsanat</h2>
            <div class="keyword-container">
                @if (keywords != null && keywords.Any())
                {
                    @for (int i = 0; i < keywords.Count; i += 10)
                    {
                        <div class="keyword-column">
                            @foreach (var keyword in keywords.Skip(i).Take(10))
                            {
                                <div class="keyword-item">
                                    <label>
                                        <input type="checkbox" @bind="keyword.IsChecked" @bind:event="oninput" />
                                        @keyword.Sana
                                    </label>
                                </div>
                            }
                        </div>
                    }
                }
                else
                {
                    <p>Ladataan avainsanoja...</p>
                }
            </div>

            <!-- Katseluoikeus -->
            <div class="form-group mt-3">
                <label>
                    <input type="checkbox" @bind="isPrivate" @bind:event="oninput" />
                    Näkyy vain rekisteröityneille
                </label>
            </div>

            <!-- Tallenna -->
            <button type="submit" class="btn btn-primary mt-3">Tallenna</button>
        </EditForm>
    </div>
}

<style>
    h1 {
        text-align: center;
        margin-bottom: 32px;
    }

    label[for="valmistuskuvaus"] {
        vertical-align: top;
        display: inline-block;
        margin-bottom: 4px;
    }
</style>

@code {
    [Parameter] public int Id { get; set; }
    public ReseptiResponse? resepti; // Changed to public
    public string? kuvanEsikatselu; // Changed to public
    public string? virheViesti;
    private List<Avainsana>? keywords;
    private bool isPrivate = false;
    private int reseptiId;

    protected override async Task OnInitializedAsync() // Changed to protected override
    {
        try
        {
            // Hae resepti API:sta
            resepti = await Http.GetFromJsonAsync<ReseptiResponse>($"resepti/{Id}");
            if (resepti == null)
            {
                virheViesti = "Valittua reseptiä ei löydy.";
                return;
            }

            // Aseta kuvan esikatselu
            kuvanEsikatselu = resepti.Kuva1;

            // Aseta katseluoikeus
            isPrivate = resepti.Katseluoikeus == "Yksityinen";

            // Tallenna reseptin ID
            reseptiId = resepti.Id;

            // Haetaan avainsanat
            await GetKeywords();
        }
        catch (Exception ex)
        {
            virheViesti = $"Virhe reseptin tietojen lataamisessa: {ex.Message}";
        }
    }

    public async Task GetKeywords()
    {
        try
        {
            // Haetaan JSON listana merkkijonoja
            var words = await Http.GetFromJsonAsync<List<string>>("/Resepti/avainsanat");

            if (words != null)
            {
                // Muunnetaan merkkijonolista Avainsana-olioiksi (Ilman Id:tä)
                keywords = words.Select(w => new Avainsana { Sana = w }).ToList();

                // Asetetaan valitut avainsanat
                foreach (var keyword in keywords)
                {
                    keyword.IsChecked = resepti.Avainsanat.Contains(keyword.Sana);
                }
            }
        }
        catch (Exception ex)
        {
            virheViesti = $"Virhe avainsanojen haussa: {ex.Message}";
        }
    }

    public async Task KuvaValittu(InputFileChangeEventArgs e)
    {
        try
        {
            var tiedosto = e.File;
            using var stream = tiedosto.OpenReadStream(5 * 1024 * 1024); // Maksimikoko: 5MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var kuvaBase64 = Convert.ToBase64String(ms.ToArray());

            // Tallennetaan kuva reseptiin ja esikatseluun
            resepti.Kuva1 = $"data:{tiedosto.ContentType};base64,{kuvaBase64}";
            kuvanEsikatselu = resepti.Kuva1;
            Console.WriteLine("Kuva valittu ja esikatselu asetettu.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe kuvan käsittelyssä: {ex.Message}");
        }
    }

    private void PoistaKuva()
    {
        resepti.Kuva1 = null;
        kuvanEsikatselu = null;
    }

    public void LisaaAinesosa()
    {
        resepti.Ainesosat = resepti.Ainesosat.Append(new AinesosanMaaraDto()).ToArray();
        Console.WriteLine("Ainesosa lisätty. Nykyinen määrä: " + resepti.Ainesosat.Length);
    }

    public void PoistaAinesosa(int index)
    {
        if (index >= 0 && index < resepti.Ainesosat.Length)
        {
            resepti.Ainesosat = resepti.Ainesosat.Where((_, i) => i != index).ToArray();
            Console.WriteLine("Ainesosa poistettu. Nykyinen määrä: " + resepti.Ainesosat.Length);
        }
    }

    public void LisaaAvainsana()
    {
        resepti.Avainsanat = resepti.Avainsanat.Append(string.Empty).ToArray();
    }

    public void PoistaAvainsana(int index)
    {
        if (index >= 0 && index < resepti.Avainsanat.Length)
        {
            resepti.Avainsanat = resepti.Avainsanat.Where((_, i) => i != index).ToArray();
        }
    }

    public async Task TallennaResepti()
    {
        try
        {
            // Asetetaan katseluoikeus
            resepti.Katseluoikeus = isPrivate ? "Yksityinen" : "Julkinen";

            // Poistetaan tyhjät arvot
            resepti.Ainesosat = resepti.Ainesosat
                .Where(a => !string.IsNullOrWhiteSpace(a.Ainesosa) && !string.IsNullOrWhiteSpace(a.Maara))
                .ToArray();

            resepti.Avainsanat = keywords
                .Where(k => k.IsChecked)
                .Select(k => k.Sana)
                .ToArray();

            // Tarkistetaan, mitä lähetetään API:lle
            string jsonData = JsonSerializer.Serialize(resepti);
            Console.WriteLine("📤 Lähetetään API:lle: " + jsonData);

            // Lähetetään API:lle
            var response = await Http.PutAsJsonAsync($"resepti/{resepti.Id}", resepti);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("✅ Resepti päivitetty onnistuneesti.");
                Navigation.NavigateTo($"/recipe/{reseptiId}");
            }
            else
            {
                Console.WriteLine("❌ Reseptin tallennus epäonnistui: " + response.StatusCode);
            }
        }
        catch (JsonException jsonEx)
        {
            Console.WriteLine($"❌ JSON-virhe tallennuksessa: {jsonEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Poikkeus tallennuksessa: {ex.Message}");
        }
    }
}

