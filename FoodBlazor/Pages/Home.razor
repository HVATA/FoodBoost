@page "/"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inherits LayoutComponentBase
@using FoodBlazor.Properties.Model
@using System.Security.Claims
@using FoodBlazor.Services
@using System.Text.Json;
@using AntDesign

<div>
    <div class="search-bar">
        <div class="search-container">
            <button class="search-button" @onclick="GetRecipesWithSearchquery" title="Hae reseptejä">
                🔍
            </button>
        </div>
        <div class="search-bar-container">
            <input type="text"
            class="custom-search-input"
            placeholder="Hae reseptejä nimellä tai ainesosalla..."
            value="@SearchQuery"
            @oninput="SearchQueryChanged" />

        </div>
    </div>

    <div class="dropdown-bar" @onclick="CloseDropdownsOnClickOutside">
        <!-- Raaka-aine dropdown -->
        <div class="dropdown" @onclick:stopPropagation="true">
            <button onclick="@ToggleIngredientDropdown" class="custom-dropbtn">Raaka-aine</button>
            @if (isIngredientDropdownVisible)
            {
                <div class="dropdown-content">
                    @if (ingredients != null && ingredients.Any())
                    {
                        @foreach (var ingredient in ingredients)
                        {
                            <label>
                                <input type="checkbox" @bind="ingredient.IsChecked" @bind:event="oninput" @onchange="UpdateSearchQuery" />
                                @ingredient.Nimi
                            </label>
                        }
                    }
                    else
                    {
                        <p>Ladataan...</p>
                    }
                </div>
            }
        </div>

        <!-- Avainsanat dropdown -->
        <div class="dropdown" @onclick:stopPropagation="true">
            <button onclick="@ToggleKeywordDropdown" class="custom-dropbtn">Avainsanat</button>
            @if (isKeywordDropdownVisible)
            {
                <div class="dropdown-content">
                    @if (keywords != null && keywords.Any())
                    {
                        @foreach (var keyword in keywords)
                        {
                            <label>
                                <input type="checkbox" @bind="keyword.IsChecked" @bind:event="oninput" @onchange="UpdateSearchQuery" />
                                @keyword.Sana
                            </label>
                        }
                    }
                    else
                    {
                        <p>Ladataan...</p>
                    }
                </div>
            }
        </div>
    </div>
    <div class="main-content">
        <div class="row">
            @if (recipes != null)
            {
                @foreach (var recipe in recipes)
                {
                    <div class="column">
                        <div class="custom-card-wrapper" @onclick="@(() => SelectRecipe(recipe))">
                            <div class="custom-card">
                                @if (!string.IsNullOrEmpty(recipe.Kuva1))
                                {
                                    <img src="data:image/png;base64,@recipe.Kuva1" alt="Reseptin kuva" style="width: 100%; height: auto;" />
                                }
                                <h4>@recipe.Nimi</h4>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>Ladataan reseptejä...</p>
            }
        </div>
    </div>
</div>

@code {
    private string SearchQuery { get; set; } = string.Empty;
    private string SearchInputClass { get; set; } = "search-input"; // Oletusluokka
    private bool isIngredientDropdownVisible = false;
    private bool isKeywordDropdownVisible = false;
    private bool isLoggedIn;

    [Parameter]
    public List<ReseptiRequest>? recipes { get; set; } // Julkinen property, jotta testit voivat asettaa sen

    [Parameter]
    public List<Ainesosa>? ingredients { get; set; } // Tee tästä parametri testejä varten

    [Parameter]
    public List<Avainsana>? keywords { get; set; } // Tee tästä parametri testejä varten



    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {   //Action upon start
        isLoggedIn = await AuthenticationStateProvider.IsUserLoggedIn();

        ///var recipesTask= GetRecipes();
        var recipesTask = GetRecipesTest();
        var ingredientsTask = GetIngredients();
        var keywordsTask = GetKeywords();

        await Task.WhenAll(recipesTask, ingredientsTask, keywordsTask);
    }

    private void ToggleIngredientDropdown()
    {

        isIngredientDropdownVisible = !isIngredientDropdownVisible;
        isKeywordDropdownVisible = false;
    }

    private void ToggleKeywordDropdown()
    {
        isKeywordDropdownVisible = !isKeywordDropdownVisible;
        isIngredientDropdownVisible = false;
    }

    private void CloseDropdownsOnClickOutside()
    {
        isIngredientDropdownVisible = false;
        isKeywordDropdownVisible = false;
    }

    private void SelectRecipe(ReseptiRequest recipe)
    {
        Navigation.NavigateTo($"/recipe/{recipe.Id}");
    }

    private void UpdateSearchQuery()
    {
        // Päivitetään hakukenttä valittujen perusteella
        var selectedIngredients = ingredients.Where(i => i.IsChecked).Select(i => i.Nimi);
        var selectedKeywords = keywords.Where(k => k.IsChecked).Select(k => k.Sana);

        SearchQuery = string.Join(", ", selectedIngredients.Concat(selectedKeywords));

        SearchQueryChanged();
    }

    public async Task SearchQueryChanged(ChangeEventArgs? e = null)
    {
        // Jos kutsu tuli hakukentältä, päivitetään SearchQuery e.Value:n perusteella
        if (e != null)
        {
            SearchQuery = e.Value?.ToString() ?? "";
        }

        // Tarkistetaan, onko hakukenttä tyhjä
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            foreach (var ingredient in ingredients)
            {
                ingredient.IsChecked = false;
            }

            foreach (var keyword in keywords)
            {
                keyword.IsChecked = false;
            }

            SearchInputClass = "search-input";
            await GetRecipesWithSearchquery();
        }
        else
        {
            var searchTerms = SearchQuery.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                         .Select(s => s.Trim())
                                         .Where(s => !string.IsNullOrWhiteSpace(s))
                                         .ToList();

            foreach (var ingredient in ingredients)
            {
                ingredient.IsChecked = searchTerms.Contains(ingredient.Nimi, StringComparer.OrdinalIgnoreCase);
            }

            foreach (var keyword in keywords)
            {
                keyword.IsChecked = searchTerms.Contains(keyword.Sana, StringComparer.OrdinalIgnoreCase);
            }

            bool found = searchTerms.All(term =>
                ingredients.Any(i => i.Nimi.Equals(term, StringComparison.OrdinalIgnoreCase)) ||
                keywords.Any(k => k.Sana.Equals(term, StringComparison.OrdinalIgnoreCase))
            );

            SearchInputClass = found ? "search-input valid" : "search-input invalid";

            await GetRecipesWithSearchquery();
        }
    }

    private async void ToggleIngredientSelection(Ainesosa ingredient, ChangeEventArgs e)
    {
        ingredient.IsChecked = (bool)e.Value;  // Muutetaan valintaa


    }

    private async void ToggleKeywordSelection(Avainsana keyword, ChangeEventArgs e)
    {
        keyword.IsChecked = (bool)e.Value;  // Muutetaan valintaa


    }

    private async Task GetRecipesWithSearchquery()
    {
        try
        {
            Console.WriteLine($"check query: {SearchQuery}");
            var queryParams = new List<string>();

            // Lisätään kaikki valitut ainesosat checkboxeista
            var selectedIngredients = ingredients
                .Where(a => a.IsChecked)
                .Select(a => $"ainesosat={Uri.EscapeDataString(a.Nimi)}");
            queryParams.AddRange(selectedIngredients);

            // Lisätään kaikki valitut avainsanat checkboxeista
            var selectedKeywords = keywords
                .Where(k => k.IsChecked)
                .Select(k => $"avainsanat={Uri.EscapeDataString(k.Sana)}");
            queryParams.AddRange(selectedKeywords);

            // Tarkistetaan, onko hakukentässä jotain
            if (!string.IsNullOrWhiteSpace(SearchQuery))
            {
                // Pilkotaan hakukentän teksti pilkulla erotettuihin osiin
                var searchTerms = SearchQuery.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                             .Select(s => s.Trim()) // Poistetaan turhat välilyönnit
                                             .Where(s => !string.IsNullOrWhiteSpace(s)) // Poistetaan tyhjät
                                             .ToList();

                foreach (var term in searchTerms)
                {
                    // Jos hakusana löytyy ainesosista, lisätään se
                    if (ingredients.Any(i => i.Nimi.Equals(term, StringComparison.OrdinalIgnoreCase)))
                    {
                        queryParams.Add($"ainesosat={Uri.EscapeDataString(term)}");
                    }

                    // Jos hakusana löytyy avainsanoista, lisätään se
                    if (keywords.Any(k => k.Sana.Equals(term, StringComparison.OrdinalIgnoreCase)))
                    {
                        queryParams.Add($"avainsanat={Uri.EscapeDataString(term)}");
                    }
                }
            }

            // Luodaan querystring API-kutsua varten
            var queryString = queryParams.Any() ? "?" + string.Join("&", queryParams) : string.Empty;

            Console.WriteLine($"/Resepti{queryString}"); // Debuggausta varten

            // Lähetetään pyyntö API:lle
            recipes = await Http.GetFromJsonAsync<List<ReseptiRequest>>($"/Resepti{queryString}");

            // Tarkistetaan, löytyikö reseptejä
            if (recipes == null || !recipes.Any())
            {
                message = "Ei löytynyt reseptejä.";
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa reseptejä: {ex.Message}";
        }
    }

    private async Task GetRecipes()
    {
        try
        {
            if (isLoggedIn)
            {
                recipes = await Http.GetFromJsonAsync<List<ReseptiRequest>>("/Resepti");
            }
            else
            {
                recipes = await Http.GetFromJsonAsync<List<ReseptiRequest>>("/Resepti/Julkiset");
            }


            if (recipes == null || !recipes.Any())
            {
                message = "Ei löytynyt reseptejä.";
            }
        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa reseptejä: {ex.Message}";
        }
    }

    ////////////TESTI//////////////////////////////////
    private async Task GetRecipesTest()
    {
        try
        {
            // Hae kevennetty reseptilista ilman kuvia
            var dtoList = await Http.GetFromJsonAsync<List<ReseptiListausTestiDto>>("/Resepti/TestiLista");

            if (dtoList == null || !dtoList.Any())
            {
                message = "Ei löytynyt reseptejä (testi).";
                return;
            }

            // Muodosta reseptit ja hae niille kuvat erikseen
            recipes = new List<ReseptiRequest>();

            foreach (var dto in dtoList)
            {
                string? kuva = null;

                try
                {
                    kuva = await Http.GetStringAsync($"/Resepti/KuvaTesti/{dto.Id}");
                }
                catch
                {
                    // Ei kuvaa, se jää nulliksi
                }

                recipes.Add(new ReseptiRequest
                    {
                        Id = dto.Id,
                        Nimi = dto.Nimi,
                        TekijaId = dto.TekijaId,
                        Katseluoikeus = dto.Katseluoikeus,
                        Kuva1 = kuva
                    });
            }
        }
        catch (Exception ex)
        {
            message = $"Virhe testireseptien haussa: {ex.Message}";
        }
    }

    ////////////TESTI//////////////////////////////////

    private async Task GetIngredients()
    {
        try
        {
            // Haetaan JSON listana merkkijonoja
            var names = await Http.GetFromJsonAsync<List<string>>("/Resepti/ainesosat");

            if (names != null)
            {
                // Muunnetaan merkkijonolista Ainesosa-olioiksi (Ilman Id:tä)
                ingredients = names.Select(n => new Ainesosa { Nimi = n }).ToList();
            }

            message = ingredients != null && ingredients.Any() ? "Ainesosat ladattu!" : "Ei löytynyt ainesosia.";
        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa ainesosia: {ex.Message}";
        }
    }

    private async Task GetKeywords()
    {
        try
        {
            // Haetaan JSON listana merkkijonoja
            var words = await Http.GetFromJsonAsync<List<string>>("/Resepti/avainsanat");

            if (words != null)
            {
                // Muunnetaan merkkijonolista Avainsana-olioiksi (Ilman Id:tä)
                keywords = words.Select(w => new Avainsana { Sana = w }).ToList();
            }

            message = keywords != null && keywords.Any() ? "Avainsanat ladattu!" : "Ei löytynyt avainsanoja.";
        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa avainsanoja: {ex.Message}";
        }
    }

}