@page "/createRecipe"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@using System.Text.Json
@using FoodBlazor.Services
@using FoodBlazor.Properties.Model
@using System.Security.Claims
@using AntDesign

<h1>Luo uusi resepti</h1>
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="container">
    <EditForm Model="uusiResepti" OnValidSubmit="TallennaResepti">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Reseptin nimi (pakollinen) -->
        <div>
            <label for="nimi">Reseptin nimi: <span class="text-danger">*</span></label>
            <InputText id="nimi" name="nimi" @bind-Value="uusiResepti.Nimi" class="form-control" />
        </div>

        <!-- Valmistuskuvaus (pakollinen) -->
        <div>
            <label for="valmistuskuvaus">Valmistuskuvaus: <span class="text-danger">*</span></label>
            <InputTextArea id="valmistuskuvaus" name="valmistuskuvaus" @bind-Value="uusiResepti.Valmistuskuvaus" class="form-control" />
        </div>

        <!-- Pakollisten kenttien selite -->
        <p class="text-muted mt-2"><span class="text-danger">*</span> Merkityt kentät ovat pakollisia.</p>

        <!-- Drop box kuvien valintaan -->
        <div>
            <label for="kuva">Valitse kuva:</label>
            <InputFile id="kuva" OnChange="KuvaValittu" class="form-control" />
            @if (!string.IsNullOrWhiteSpace(kuvanEsikatselu))
            {
                <div class="image-preview">
                    <img src="@kuvanEsikatselu" alt="Valittu kuva" class="preview-image" />
                </div>
            }
        </div>

        <!-- Ainesosat -->
        <h2>Ainesosat</h2>
        @for (int i = 0; i < uusiResepti.Ainesosat.Length; i++)
        {
            var index = i;
            <div class="ingredient-row">
                <InputText placeholder="Ainesosa" class="ingredient-input" @bind-Value="uusiResepti.Ainesosat[index].Ainesosa" />
                <InputText placeholder="Määrä" class="amount-input" @bind-Value="uusiResepti.Ainesosat[index].Maara" />
                <button type="button" class="remove-button" @onclick="() => PoistaAinesosa(index)">-</button>
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="LisaaAinesosa">+ Lisää ainesosa</button>

        <!-- Avainsanat -->
        <h2>Avainsanat</h2>
        <div class="keyword-container">
            @if (keywords != null && keywords.Any())
            {
                @for (int i = 0; i < keywords.Count; i += 10)
                {
                    <div class="keyword-column">
                        @foreach (var keyword in keywords.Skip(i).Take(10))
                        {
                            <div class="keyword-item">
                                <label>
                                    <input type="checkbox" @bind="keyword.IsChecked" @bind:event="oninput" />
                                    @keyword.Sana
                                </label>
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <p>Ladataan avainsanoja...</p>
            }
        </div>

        <!-- Katseluoikeus -->
        <div class="form-group mt-3">
            <label>
                <input type="checkbox" @bind="isPrivate" @bind:event="oninput" />
                Näkyy vain rekisteröityneille
            </label>
        </div>

        <!-- Tallenna -->
        <button type="submit" class="btn btn-primary mt-3">Tallenna</button>
    </EditForm>
</div>
<style>
    h1 {
        text-align: center;
        margin-bottom: 32px;
    }

    label[for="valmistuskuvaus"] {
        vertical-align: top;
        display: inline-block;
        margin-bottom: 4px;
    }
</style>

@code {
    private ReseptiRequest uusiResepti = new();
    private string? kuvanEsikatselu;
    private int tekijaId = 0; // Oletusarvo, jos ID:tä ei saada
    private List<Avainsana>? keywords;
    private string message = string.Empty;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private bool isPrivate = false;

    protected override async Task OnInitializedAsync()
    {
        uusiResepti.Ainesosat = new AinesosanMaaraDto[] { new AinesosanMaaraDto() };
        uusiResepti.Avainsanat = new string[] { string.Empty };

        // Haetaan kirjautuneen käyttäjän tiedot
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            // Etsitään käyttäjän tekijä-ID
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            Console.WriteLine($"Haettu käyttäjän tekijäId: {userId}"); // Debug-tulostus

            if (int.TryParse(userId, out var id))
            {
                tekijaId = id;
                Console.WriteLine($"Käyttäjän TekijaId asetettu: {tekijaId}");
            }
            else
            {
                Console.WriteLine("Virhe: Käyttäjän TekijaId ei löytynyt tai se ei ole numero.");
            }
        }
        else
        {
            Console.WriteLine("Virhe: Käyttäjä ei ole kirjautunut.");
        }

        // Haetaan avainsanat
        await GetKeywords();
        Console.WriteLine($"Avainsanojen määrä: {keywords?.Count ?? 0}"); // Debug-tulostus
    }

    private async Task GetKeywords()
    {
        try
        {
            // Haetaan JSON listana merkkijonoja
            var words = await Http.GetFromJsonAsync<List<string>>("/Resepti/avainsanat");

            if (words != null)
            {
                // Muunnetaan merkkijonolista Avainsana-olioiksi (Ilman Id:tä)
                keywords = words.Select(w => new Avainsana { Sana = w }).ToList();
                Console.WriteLine($"Ladatut avainsanat: {string.Join(", ", words)}"); // Debug-tulostus
            }

            message = keywords != null && keywords.Any() ? "Avainsanat ladattu!" : "Ei löytynyt avainsanoja.";
        }
        catch (Exception ex)
        {
            message = $"Virhe haettaessa avainsanoja: {ex.Message}";
            Console.WriteLine(message); // Debug-tulostus
        }
    }

    public async Task KuvaValittu(InputFileChangeEventArgs e)
    {
        try
        {
            var tiedosto = e.File;
            using var stream = tiedosto.OpenReadStream(5 * 1024 * 1024); // Maksimikoko: 5MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var kuvaBase64 = Convert.ToBase64String(ms.ToArray());

            // Tallennetaan kuva reseptiin ja esikatseluun
            uusiResepti.Kuva1 = $"data:{tiedosto.ContentType};base64,{kuvaBase64}";
            kuvanEsikatselu = uusiResepti.Kuva1;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Virhe kuvan käsittelyssä: {ex.Message}");
        }
    }

    private void LisaaAinesosa()
    {
        uusiResepti.Ainesosat = uusiResepti.Ainesosat.Append(new AinesosanMaaraDto()).ToArray();
    }

    private void PoistaAinesosa(int index)
    {
        if (index >= 0 && index < uusiResepti.Ainesosat.Length)
        {
            uusiResepti.Ainesosat = uusiResepti.Ainesosat.Where((_, i) => i != index).ToArray();
        }
    }

    private void LisaaAvainsana()
    {
        uusiResepti.Avainsanat = uusiResepti.Avainsanat.Append(string.Empty).ToArray();
    }

    private void PoistaAvainsana(int index)
    {
        if (index >= 0 && index < uusiResepti.Avainsanat.Length)
        {
            uusiResepti.Avainsanat = uusiResepti.Avainsanat.Where((_, i) => i != index).ToArray();
        }
    }

    private async Task TallennaResepti()
    {
        try
        {
            if (tekijaId == 0)
            {
                Console.WriteLine("❌ Virhe: TekijaId ei ole saatavilla. Reseptiä ei tallenneta.");
                errorMessage = "Tekijä-ID puuttuu.";
                return;
            }

            // Asetetaan tekijä ID
            uusiResepti.TekijaId = tekijaId;

            // Asetetaan katseluoikeus
            uusiResepti.Katseluoikeus = isPrivate ? "Yksityinen" : "Julkinen";

            // Poistetaan tyhjät arvot
            uusiResepti.Ainesosat = uusiResepti.Ainesosat
                .Where(a => !string.IsNullOrWhiteSpace(a.Ainesosa) && !string.IsNullOrWhiteSpace(a.Maara))
                .ToArray();

            // Kerätään valitut avainsanat
            uusiResepti.Avainsanat = keywords
                .Where(k => k.IsChecked)
                .Select(k => k.Sana)
                .ToArray();

            // Tarkistetaan, mitä lähetetään API:lle
            string jsonData = JsonSerializer.Serialize(uusiResepti);
            Console.WriteLine("📤 Lähetetään API:lle: " + jsonData);

            // Lähetetään API:lle
            var response = await Http.PostAsJsonAsync("resepti", uusiResepti);

            if (response.IsSuccessStatusCode)
            {
                var responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine("📩 API palautti: " + responseBody);

                var createdRecipe = JsonSerializer.Deserialize<ReseptiResponse>(responseBody);
                if (createdRecipe != null)
                {
                    Console.WriteLine("✅ Luodun reseptin ID: " + createdRecipe.Id);
                    successMessage = "Resepti tallennettu onnistuneesti";
                    // Jos tallennus onnistuu, navigoidaan luodulle reseptille
                    Navigation.NavigateTo($"/recipe/{createdRecipe.Id}");
                }
                else
                {
                    Console.WriteLine("❌ Virhe: Ei voitu deserialisoida reseptiä.");
                    errorMessage = "Reseptin tallennuksessa tapahtui virhe.";
                }
            }
            else
            {
                Console.WriteLine("❌ Reseptin tallennus epäonnistui: " + response.StatusCode);
                errorMessage = $"Reseptin tallennus epäonnistui: {response.StatusCode}";
            }
        }
        catch (JsonException jsonEx)
        {
            Console.WriteLine($"❌ JSON-virhe tallennuksessa: {jsonEx.Message}");
            errorMessage = "JSON-virhe tallennuksessa.";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Poikkeus tallennuksessa: {ex.Message}");
            errorMessage = "Reseptin tallennuksessa tapahtui virhe.";
        }
    }
}
